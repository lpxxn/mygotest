// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyTest2 service

type MyTest2Client interface {
	Test2(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (*TestMsg, error)
}

type myTest2Client struct {
	cc *grpc.ClientConn
}

func NewMyTest2Client(cc *grpc.ClientConn) MyTest2Client {
	return &myTest2Client{cc}
}

func (c *myTest2Client) Test2(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (*TestMsg, error) {
	out := new(TestMsg)
	err := grpc.Invoke(ctx, "/helloworld.MyTest2/Test2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyTest2 service

type MyTest2Server interface {
	Test2(context.Context, *TestMsg) (*TestMsg, error)
}

func RegisterMyTest2Server(s *grpc.Server, srv MyTest2Server) {
	s.RegisterService(&_MyTest2_serviceDesc, srv)
}

func _MyTest2_Test2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyTest2Server).Test2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.MyTest2/Test2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyTest2Server).Test2(ctx, req.(*TestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyTest2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.MyTest2",
	HandlerType: (*MyTest2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test2",
			Handler:    _MyTest2_Test2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() {
	proto.RegisterFile("test.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 90 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f,
	0xca, 0x49, 0x91, 0x12, 0x40, 0xb0, 0x21, 0xb2, 0x46, 0x76, 0x5c, 0xec, 0xbe, 0x95, 0x21, 0xa9,
	0xc5, 0x25, 0x46, 0x42, 0xc6, 0x5c, 0xac, 0x10, 0x86, 0xb0, 0x1e, 0x92, 0x32, 0x90, 0x90, 0x6f,
	0x71, 0xba, 0x14, 0x36, 0x41, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x31, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x74, 0xc2, 0x7f, 0x98, 0x72, 0x00, 0x00, 0x00,
}
