package serverconfig

import (
	"fmt"
	"encoding/json"
	"os"
	"io/ioutil"
)

type AutoGenerated struct {
	Logging struct {
		IncludeScopes bool `json:"IncludeScopes"`
		LogLevel      struct {
			Default string `json:"Default"`
		} `json:"LogLevel"`
	} `json:"Logging"`
	MetatraderServerInfo struct {
		Server  string `json:"Server"`
		Port    int    `json:"Port"`
		Login   int    `json:"Login"`
		Pwd     string `json:"Pwd"`
		Timeout int    `json:"Timeout"`
	} `json:"MetatraderServerInfo"`
	CrmConfig struct {
		UseRadisSession bool   `json:"UseRadisSession"`
		Debug           bool   `json:"Debug"`
		Env             string `json:"Env"`
	} `json:"CrmConfig"`
	RedisConfig struct {
		Host string `json:"Host"`
	} `json:"RedisConfig"`
}
// doc t
func ReadAppSetting(path string)(*AutoGenerated, error)  {
	file, err := ioutil.ReadFile(path)
	if err != nil {
		fmt.Printf("read file error the path is : %s, Err: %v", path, err)
		return nil, err
	}
	var obj *AutoGenerated = new(AutoGenerated)

	if err = json.Unmarshal(file, obj); err!= nil {
		fmt.Printf("Unmarsh json err: %v", err)
		return nil, err
	}
	return obj, nil
}

// save the struct to file
func (config *AutoGenerated) SaveToFile(path string) error {
	json, err := json.MarshalIndent(config, "", "\t")
	if err != nil {
		return err
	}
	perm := os.FileMode(0777)
	err = ioutil.WriteFile(path, json, perm)

	if err != nil {
		return err;
	}
	fmt.Printf("save end")

	return nil
}