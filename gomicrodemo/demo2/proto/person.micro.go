// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: person.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Person service

type PersonService interface {
	DoAction(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
}

type personService struct {
	c    client.Client
	name string
}

func NewPersonService(name string, c client.Client) PersonService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &personService{
		c:    c,
		name: name,
	}
}

func (c *personService) DoAction(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.name, "Person.DoAction", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Person service

type PersonHandler interface {
	DoAction(context.Context, *HelloRequest, *HelloResponse) error
}

func RegisterPersonHandler(s server.Server, hdlr PersonHandler, opts ...server.HandlerOption) {
	type person interface {
		DoAction(ctx context.Context, in *HelloRequest, out *HelloResponse) error
	}
	type Person struct {
		person
	}
	h := &personHandler{hdlr}
	s.Handle(s.NewHandler(&Person{h}, opts...))
}

type personHandler struct {
	PersonHandler
}

func (h *personHandler) DoAction(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.PersonHandler.DoAction(ctx, in, out)
}
